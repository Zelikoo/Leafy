import 'package:http/http.dart' as http;
import 'dart:convert';

class NetworkHelper {
  final String url;

  NetworkHelper(this.url);

  /// M√©thode GET
  Future<dynamic> getData() async {
    try {
      final response = await http.get(Uri.parse(url));

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        print(
          "‚ö†Ô∏è Erreur lors de la r√©cup√©ration des donn√©es: ${response.statusCode}",
        );
        return null;
      }
    } catch (e) {
      print("‚ùå Exception lors du GET: $e");
      return null;
    }
  }

  /// M√©thode POST
  Future<dynamic> postData(Map<String, dynamic> data) async {
    try {
      final response = await http.post(
        Uri.parse(url),
        body: jsonEncode(data),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        // Retourne la r√©ponse d√©cod√©e
        return jsonDecode(response.body);
      } else {
        print("‚ö†Ô∏è Erreur lors de l'envoi des donn√©es: ${response.statusCode}");
        print("üì© R√©ponse: ${response.body}");
        return null;
      }
    } catch (e) {
      print("‚ùå Exception lors du POST: $e");
      return null;
    }
  }

  // M√©thode DELETE
  Future<dynamic> deleteProduitPanier(int idProduit) async {
    try {
      final deleteUrl = Uri.parse('$url?id_produit=$idProduit');
      final response = await http.delete(deleteUrl);

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        print(
          "‚ö†Ô∏è Erreur lors de la suppression des donn√©es: ${response.statusCode}",
        );
        return null;
      }
    } catch (e) {
      print("‚ùå Exception lors du DELETE: $e");
      return null;
    }
  }
}
